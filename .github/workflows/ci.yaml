name: CI - Build, Lint, Test, and Push to ECR

on:
  push:
    branches:
      - main
      - develop
      - 'feature/*'
  pull_request:
    branches:
      - main
      - develop

permissions:
  id-token: write
  contents: read

jobs:
  linter:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.x'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Run Linter
        run: |
          pip install flake8
          flake8 .

  tests:
    runs-on: ubuntu-latest
    needs: linter
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.x'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

     # - name: Run Tests
     #   run: |
     #     pip install pytest
     #     pytest

  build_and_push_to_ecr:
    runs-on: ubuntu-latest
    needs: tests
    env:
      AWS_REGION: ${{ secrets.AWS_REGION }}
      AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          role-to-assume: arn:aws:iam::${{ secrets.AWS_ACCOUNT_ID }}:role/ecr-oidc-role-for-github
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Log in to Amazon ECR
        run: |
          aws ecr get-login-password --region $AWS_REGION | docker login --username AWS --password-stdin $AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com

      - name: Build and Push Docker Image
        run: |
          docker build -t python-flask-api .
          docker tag python-flask-api:latest $AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com/labs/python-flask-api:latest
          docker push $AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com/labs/python-flask-api:latest

  notify:
    runs-on: ubuntu-latest
    needs: [linter, tests, build_and_push_to_ecr]
    if: ${{ always() }} # Always run the notify job
    steps:
      - name: Send notification to Slack
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
        run: |
          if [ "${{ job.status }}" == "success" ]; then
            curl -X POST -H 'Content-type: application/json' --data '{"text":"CI has passed for python-flask-api!"}' $SLACK_WEBHOOK_URL
          else
            curl -X POST -H 'Content-type: application/json' --data '{"text":"CI has failed for python-flas-api!"}' $SLACK_WEBHOOK_URL
          fi